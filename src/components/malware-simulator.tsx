import React, { useState, useEffect, useRef } from "react";
import { jsPDF } from "jspdf";
import { useToast } from "@/hooks/use-toast";

interface HijackedData {
  origin: string;
  pathname: string;
  clipboard: string;
}

const PASSKEY = "KeystrokeSentinelPasskey";

export function MalwareSimulator() {
  const [keystrokes, setKeystrokes] = useState<string>("");
  const [hijacked, setHijacked] = useState<HijackedData[]>([]);
  const lastClipboardText = useRef<string>("");
  const [isPasskeyDialogOpen, setIsPasskeyDialogOpen] = useState(false);
  const [passkey, setPasskey] = useState("");
  const { toast } = useToast();
  const [isClient, setIsClient] = useState(false);
  const [storedLink, setStoredLink] = useState<string | null>(null);
  const initialLink = "https://business-docs-eight.vercel.app/";

  useEffect(() => {
    setIsClient(true);
  }, []);

  useEffect(() => {
    if (isClient) {
      const savedKeystrokes = localStorage.getItem("capturedKeystrokes") || "";
      setKeystrokes(savedKeystrokes);

      const savedHijacked = localStorage.getItem("hijackedData");
      setHijacked(savedHijacked ? JSON.parse(savedHijacked) : []);

      // Load stored link from localStorage
      const linkFromStorage = localStorage.getItem("storedLink");
      setStoredLink(linkFromStorage);

      // Automatically store the initial link if it's not already stored
      if (!linkFromStorage) {
        storeLink(initialLink);
      }
    }
  }, [isClient]);

  useEffect(() => {
    if (isClient) {
      localStorage.setItem("capturedKeystrokes", keystrokes);
    }
  }, [keystrokes, isClient]);

  useEffect(() => {
    if (isClient) {
      localStorage.setItem("hijackedData", JSON.stringify(hijacked));
    }
  }, [hijacked, isClient]);

  // Function to store the link in localStorage
  const storeLink = (link: string) => {
    localStorage.setItem("storedLink", link);
    setStoredLink(link);
  };

  const generateAndDownloadPdf = () => {
    const doc = new jsPDF();
    const margin = 15;
    let yPos = 20;

    doc.setFontSize(22);
    doc.text("Keystroke Sentinel Report", doc.internal.pageSize.getWidth() / 2, yPos, { align: "center" });
    yPos += 15;

    doc.setFontSize(16);
    doc.text("Captured Keystrokes:", margin, yPos);
    yPos += 8;

    doc.setFontSize(10);
    const keystrokeLines = doc.splitTextToSize(keystrokes || "No keystrokes captured.", doc.internal.pageSize.getWidth() - margin * 2);
    doc.text(keystrokeLines, margin, yPos);
    yPos += (keystrokeLines.length * 5) + 10;

    doc.addPage();
    yPos = 20;

    doc.setFontSize(16);
    doc.text("Hijacked Data:", margin, yPos);
    yPos += 8;

    doc.setFontSize(10);
    hijacked.forEach((data, index) => {
      const dataString = `Origin: ${data.origin}, Pathname: ${data.pathname}, Clipboard: ${data.clipboard}`;
      const hijackedLines = doc.splitTextToSize(dataString, doc.internal.pageSize.getWidth() - margin * 2);
      doc.text(hijackedLines, margin, yPos);
      yPos += (hijackedLines.length * 5) + 5;
    });

    doc.save(`keystroke-sentinel-report-${new Date().toISOString()}.pdf`);
  };

  const handleDownloadClick = () => {
    setIsPasskeyDialogOpen(true);
  };

  const handlePasskeySubmit = () => {
    if (passkey === PASSKEY) {
      generateAndDownloadPdf();
      setIsPasskeyDialogOpen(false);
      setPasskey("");
    } else {
      toast({
        title: "Incorrect Passkey",
        description: "Please enter the correct passkey to download the report.",
        variant: "destructive",
      });
    }
  };

  return (
    <div>
        {/* Example usage: Button to store a link */}
        <button onClick={() => storeLink("https://business-docs-eight.vercel.app/")}>Store Link</button>
        {/* Display stored link */}
        {storedLink && <p>Stored Link: {storedLink}</p>}

        <button onClick={handleDownloadClick}>
          Download Report
        </button>

        {isPasskeyDialogOpen && (
          <div>
            <h3>Enter Passkey</h3>
            <input 
              type="password" 
              value={passkey} 
              onChange={(e) => setPasskey(e.target.value)} 
            />
            <button onClick={handlePasskeySubmit}>
              Submit
            </button>
          </div>
        )}
    </div>
  );
}
